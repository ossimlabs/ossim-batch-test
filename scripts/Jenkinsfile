def notifyObj
node("BATCH_TEST"){
   env.WORKSPACE=pwd()
   env.S3_DATA_BUCKET="s3://o2-test-data"
   
   echo "WORKSPACE        = ${env.WORKSPACE}"
   echo "LD_LIBRARY_PATH  = ${env.LD_LIBRARY_PATH}"   
   echo "PATH             = ${env.PATH}"
   echo "S3_DATA_BUCKET   = ${env.S3_DATA_BUCKET}"
   echo "ACCEPT_TESTS     = ${ACCEPT_TESTS}"
   echo "OSSIM_GIT_BRANCH = ${OSSIM_GIT_BRANCH}"
   echo "DO_CLEANUP       = ${DO_CLEANUP}"
   try{
     stage("Checkout") {
         dir("ossim-batch-test") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/ossim-batch-test.git"
         }
     }

     stage("Download Artifacts") {
         step ([$class: "CopyArtifact",
                projectName: "ossim-ci-${OSSIM_GIT_BRANCH}",
                filter: "ossim-ci-${OSSIM_GIT_BRANCH}.tgz",
                flatten: true])
         sh "tar xvfz ossim-ci-${OSSIM_GIT_BRANCH}.tgz"
         notifyObj = load "${env.WORKSPACE}/ossim-ci/jenkins/pipeline/notify.groovy"
        
        step ([$class: 'CopyArtifact',
              projectName: "ossim-${OSSIM_GIT_BRANCH}",
              filter: "artifacts/ossim-install.tgz",
              flatten: true,
              target: "${env.WORKSPACE}"])
        step ([$class: 'CopyArtifact',
              projectName: "omar-opencv3_2-dev-${OSSIM_GIT_BRANCH}",
              filter: "opencv-3.2-minimal-install.tgz",
              flatten: true,
              target: "${env.WORKSPACE}"])
        sh """
          pushd ${env.WORKSPACE}
          tar xvfz ossim-install.tgz
          pushd install
          tar xvfz ${env.WORKSPACE}/opencv-3.2-minimal-install.tgz
          popd
          popd
        """
     }
     if (ACCEPT_TESTS.toBoolean()) {
       stage("Accept Results")
       {
          sh """
          pushd ${env.WORKSPACE}/ossim-batch-test/scripts/linux
          ./ossim-test.sh accept
          popd
          """
      }
    }
    else {
       stage("Run Tests")
       {
          sh """
          pushd ${env.WORKSPACE}/ossim-batch-test/scripts/linux
          ./ossim-test.sh
          popd
          """
       }
    }
   
  }
  catch(e)
  {
    currentBuild.result = "FAILED"
    notifyObj?.notifyFailed()
  }
   if ( "${DO_CLEANUP}" == "true")
   {
      stage("Clean Workspace"){
         step([$class: 'WsCleanup'])
      }
   }
   else
   {
      echo "The cleanup stage was skipped. Make sure workspace <${env.WORKSPACE}> is manually cleaned out at some point."
   }
}
